#include <iostream>
#include <string>
#include <stack>
#include <cctype>
#include <stdexcept>

using namespace std;

// Функция для определения приоритета операции
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*') return 2;
    return 0;
}

// Функция для выполнения операции
long long applyOp(long long a, long long b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
    }
    throw invalid_argument("Неизвестный оператор");
}

// Функция для удаления пробелов из строки
string removeSpaces(const string &expression) {
    string result;
    for (char ch : expression) {
        if (ch != ' ') result += ch;
    }
    return result;
}

// Функция для вычисления выражения
long long evaluate(const string &expression) {
    string expr = removeSpaces(expression); // Удаляем пробелы
    stack<long long> values;               // Стек для чисел
    stack<char> ops;                       // Стек для операторов

    for (size_t i = 0; i < expr.length(); i++) {
        // Если текущий символ - цифра, читаем все число
        if (isdigit(expr[i])) {
            long long val = 0;
            while (i < expr.length() && isdigit(expr[i])) {
                val = (val * 10) + (expr[i] - '0');
                i++;
            }
            i--; // Возвращаемся на один символ назад
            values.push(val);
        }
        // Если текущий символ - '(', добавляем его в стек операторов
        else if (expr[i] == '(') {
            ops.push(expr[i]);
        }
        // Если текущий символ - ')', вычисляем всё до открывающей скобки
        else if (expr[i] == ')') {
            while (!ops.empty() && ops.top() != '(') {
                long long val2 = values.top();
                values.pop();
                long long val1 = values.top();
                values.pop();
                char op = ops.top();
                ops.pop();
                values.push(applyOp(val1, val2, op));
            }
            if (ops.empty() || ops.top() != '(') {
                throw invalid_argument("Неправильное использование скобок");
            }
            ops.pop(); // Убираем '(' из стека
        }
        // Если текущий символ - оператор
        else if (expr[i] == '+' || expr[i] == '-' || expr[i] == '*') {
            // Пока приоритет текущего оператора меньше или равен приоритету оператора на вершине стека,
            // выполняем операции в стеке
            while (!ops.empty() && precedence(ops.top()) >= precedence(expr[i])) {
                long long val2 = values.top();
                values.pop();
                long long val1 = values.top();
                values.pop();
                char op = ops.top();
                ops.pop();
                values.push(applyOp(val1, val2, op));
            }
            ops.push(expr[i]); // Добавляем текущий оператор в стек
        }
        // Если текущий символ не является числом, скобкой или оператором, это ошибка
        else {
            throw invalid_argument("Недопустимый символ в выражении");
        }
    }

    // Выполняем оставшиеся операции в стеке
    while (!ops.empty()) {
        if (ops.top() == '(') {
            throw invalid_argument("Неправильное использование скобок");
        }
        long long val2 = values.top();
        values.pop();
        long long val1 = values.top();
        values.pop();
        char op = ops.top();
        ops.pop();
        values.push(applyOp(val1, val2, op));
    }

    // Результат - верхний элемент стека значений
    return values.top();
}

int main() {
    setlocale(LC_ALL, "rus");
    string expression;
    wcout << L"Введите числовое выражение: ";
    getline(cin, expression);

    try {
        long long result = evaluate(expression);
        wcout << L"Результат: " << result << endl;
    } catch (const invalid_argument &e) {
        wcout << L"Ошибка: " << e.what() << endl;
    }
    return 0;
}

